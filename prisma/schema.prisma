// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle pour les collaborateurs
model Collaborateur {
  id                String      @id @default(uuid())
  nom               String
  couleur           String
  entreprise        String
  aCompte           Boolean     @default(false) @map("a_compte")
  createdAt         DateTime    @default(now()) @map("created_at")
  
  // Relations
  evenements        Evenement[]
  compte            Compte?
  managersPar       Compte[] @relation("ManagerCollaborateurs") // Relation avec les comptes qui gèrent ce collaborateur
  contactsGeres     Contact[]   @relation("CollaborateurContact")
  demandesConges    DemandeConge[]
  salarie           Salarie?
  ficheDePoste      FicheDePoste?

  @@map("collaborateurs")
}

// Modèle pour les comptes utilisateurs
model Compte {
  id                String      @id @default(uuid())
  identifiant       String      @unique
  motDePasse        String      @map("mot_de_passe")
  role              Role
  collaborateurId   String      @unique @map("collaborateur_id")
  createdAt         DateTime    @default(now()) @map("created_at")
  
  // Relations
  collaborateur     Collaborateur @relation(fields: [collaborateurId], references: [id], onDelete: Cascade)
  collaborateursGeres Collaborateur[] @relation("ManagerCollaborateurs") // Relations avec les collaborateurs gérés
  demandesConges    DemandeConge[]
  contacts          Contact[]
  notifications     Notification[]

  @@map("comptes")
}

// Modèle pour les événements
model Evenement {
  id                String      @id @default(uuid())
  title             String
  start             DateTime
  end               DateTime
  collaborateurId   String      @map("collaborateur_id")
  typeEvenement     String      @map("type_evenement")
  lieuChantier      String?     @map("lieu_chantier")
  zoneTrajet        String?     @map("zone_trajet")
  panierRepas       Boolean     @default(false) @map("panier_repas")
  ticketRestaurant  Boolean     @default(false) @map("ticket_restaurant")
  heuresSupplementaires Float   @default(0) @map("heures_supplementaires")
  grandDeplacement  Boolean     @default(false) @map("grand_deplacement")
  prgd              Boolean     @default(false)
  nombrePrgd        Int         @default(0) @map("nombre_prgd")
  typeAbsence       String?     @map("type_absence")
  verrouille        Boolean     @default(false)
  latitude          Float?
  longitude         Float?
  adresseComplete   String?     @map("adresse_complete")
  createdAt         DateTime    @default(now()) @map("created_at")
  
  // Relations
  collaborateur     Collaborateur @relation(fields: [collaborateurId], references: [id], onDelete: Cascade)

  @@map("evenements")
}

// Modèle pour les salariés (RH)
model Salarie {
  id                String      @id @default(uuid())
  nom               String
  prenom            String
  classification    String
  dateEntree        DateTime    @map("date_entree")
  typeContrat       String      @map("type_contrat")
  dureeContrat      String?     @map("duree_contrat")
  certifications    String[]
  habilitations     String[]
  entreprise        String
  poste             String
  email             String
  telephone         String
  adresse           String?
  codePostal        String?     @map("code_postal")
  ville             String?
  dateNaissance     DateTime?   @map("date_naissance")
  numeroSecu        String?     @map("numero_secu")
  collaborateurId   String?     @unique @map("collaborateur_id")
  createdAt         DateTime    @default(now()) @map("created_at")
  
  // Relations
  collaborateur     Collaborateur? @relation(fields: [collaborateurId], references: [id])

  @@map("salaries")
}

// Modèle pour les véhicules (Logistique)
model Vehicule {
  id                      String      @id @default(uuid())
  societe                 String
  marque                  String
  modele                  String
  immatriculation         String      @unique
  etat                    String
  proprietaire            String
  dateMiseEnCirculation   DateTime?   @map("date_mise_en_circulation")
  kilometrage             Int?
  kmProchaineRevision     Int?        @map("km_prochaine_revision")
  dateLimiteControleTechnique DateTime? @map("date_limite_controle_technique")
  dateLimiteControlePollution DateTime? @map("date_limite_controle_pollution")
  typeVehicule            String?     @map("type_vehicule")
  createdAt               DateTime    @default(now()) @map("created_at")

  @@map("vehicules")
}

// Modèle pour les contacts (CRM)
model Contact {
  id                      String      @id @default(uuid())
  nom                     String
  prenom                  String
  email                   String
  telephone               String
  adresse                 String
  codePostal              String      @map("code_postal")
  ville                   String
  categories              String[]
  status                  String
  commentaires            String?
  dateCreation            DateTime    @map("date_creation")
  dateDerniereModification DateTime   @map("date_derniere_modification")
  utilisateurId           String      @map("utilisateur_id")
  collaborateursIds       String[]    @map("collaborateurs_ids")
  montantDevis            Float?      @map("montant_devis")
  archived                Boolean     @default(false)
  archiveDate             DateTime?   @map("archive_date")
  
  // Relations
  utilisateur             Compte @relation(fields: [utilisateurId], references: [id])
  collaborateurs          Collaborateur[] @relation("CollaborateurContact")

  @@map("contacts")
}

// Modèle pour les demandes de congés
model DemandeConge {
  id                      String      @id @default(uuid())
  utilisateurId           String      @map("utilisateur_id")
  collaborateurId         String      @map("collaborateur_id")
  collaborateurNom        String      @map("collaborateur_nom")
  dateDebut               DateTime    @map("date_debut")
  dateFin                 DateTime    @map("date_fin")
  typeConge               String      @map("type_conge")
  motif                   String
  statut                  String
  commentaireAdmin        String?     @map("commentaire_admin")
  dateCreation            DateTime    @map("date_creation")
  dateModification        DateTime    @map("date_modification")
  notificationLue         Boolean     @default(false) @map("notification_lue")
  
  // Relations
  utilisateur             Compte @relation(fields: [utilisateurId], references: [id])
  collaborateur           Collaborateur @relation(fields: [collaborateurId], references: [id], onDelete: Cascade)
  notifications           Notification[]

  @@map("demandes_conges")
}

// Modèle pour les notifications
model Notification {
  id                      String      @id @default(uuid())
  utilisateurId           String      @map("utilisateur_id")
  message                 String
  lien                    String
  dateCreation            DateTime    @map("date_creation")
  lue                     Boolean     @default(false)
  type                    String
  demandeId               String?     @map("demande_id")
  
  // Relations
  utilisateur             Compte @relation(fields: [utilisateurId], references: [id])
  demandeConge            DemandeConge? @relation(fields: [demandeId], references: [id])

  @@map("notifications")
}

// Modèle pour les contrats de maintenance
model ContratMaintenance {
  id                      String      @id @default(uuid())
  client                  String
  reference               String      @unique
  type                    String
  montant                 Float
  dateDebut               DateTime    @map("date_debut")
  dateEcheance            DateTime    @map("date_echeance")
  statut                  String
  description             String
  contactClient           String      @map("contact_client")
  emailContact            String      @map("email_contact")
  telephoneContact        String      @map("telephone_contact")
  notes                   String?
  dateCreation            DateTime    @map("date_creation")
  dateDerniereModification DateTime   @map("date_derniere_modification")

  @@map("contrats_maintenance")
}

// Modèle pour les stocks (Logistique)
model StockItem {
  id                      String      @id @default(uuid())
  cableType               String      @map("cable_type")
  typeM                   String      @map("type_m")
  typeG                   String      @map("type_g")
  enroulement             String
  longueur                Int
  createdAt               DateTime    @default(now()) @map("created_at")

  @@map("stock_items")
}

// Modèle pour les fiches de poste
model FicheDePoste {
  id                String      @id @default(uuid())
  classification    String
  poste             String
  entreprise        String
  typeContrat       String      @map("type_contrat")
  dureeContrat      String?     @map("duree_contrat")
  certifications    String[]
  habilitations     String[]
  competencesRequises String[]  @map("competences_requises")
  description       String
  missions          String[]
  experience        String?
  formation         String?
  remuneration      String?
  avantages         String?
  horaires          String?
  email             String?
  telephone         String?
  adresse           String?
  codePostal        String?     @map("code_postal")
  ville             String?
  dateNaissance     DateTime?   @map("date_naissance")
  numeroSecu        String?     @map("numero_secu")
  lieuTravail       String?     @map("lieu_travail")
  dateCreation      DateTime    @default(now()) @map("date_creation")
  dateModification  DateTime    @default(now()) @map("date_modification")
  estActive         Boolean     @default(true) @map("est_active")
  collaborateurId   String?     @unique @map("collaborateur_id")
  
  // Relations
  collaborateur     Collaborateur? @relation(fields: [collaborateurId], references: [id])
  
  @@map("fiches_de_poste")
}

// Modèle pour les administrateurs
model Admin {
  id                String      @id @default(uuid())
  nom               String
  prenom            String
  email             String      @unique
  telephone         String
  role              RoleAdmin
  departement       String
  dateCreation      DateTime    @map("date_creation") @default(now())
  dernierAcces      DateTime    @map("dernier_acces") @default(now())
  estActif          Boolean     @map("est_actif") @default(true)
  
  @@map("admins")
}

// Énumération pour les rôles d'administrateur
enum RoleAdmin {
  super_admin
  admin
  moderateur
}

// Énumération pour les rôles d'utilisateur
enum Role {
  admin
  manager
  collaborateur
}
