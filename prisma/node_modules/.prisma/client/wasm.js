
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CollaborateurScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  couleur: 'couleur',
  entreprise: 'entreprise',
  aCompte: 'aCompte',
  createdAt: 'createdAt'
};

exports.Prisma.CompteScalarFieldEnum = {
  id: 'id',
  identifiant: 'identifiant',
  motDePasse: 'motDePasse',
  role: 'role',
  collaborateurId: 'collaborateurId',
  createdAt: 'createdAt'
};

exports.Prisma.EvenementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  start: 'start',
  end: 'end',
  collaborateurId: 'collaborateurId',
  typeEvenement: 'typeEvenement',
  lieuChantier: 'lieuChantier',
  zoneTrajet: 'zoneTrajet',
  panierRepas: 'panierRepas',
  ticketRestaurant: 'ticketRestaurant',
  heuresSupplementaires: 'heuresSupplementaires',
  grandDeplacement: 'grandDeplacement',
  prgd: 'prgd',
  nombrePrgd: 'nombrePrgd',
  typeAbsence: 'typeAbsence',
  verrouille: 'verrouille',
  latitude: 'latitude',
  longitude: 'longitude',
  adresseComplete: 'adresseComplete',
  createdAt: 'createdAt'
};

exports.Prisma.SalarieScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  classification: 'classification',
  dateEntree: 'dateEntree',
  typeContrat: 'typeContrat',
  dureeContrat: 'dureeContrat',
  certifications: 'certifications',
  habilitations: 'habilitations',
  entreprise: 'entreprise',
  poste: 'poste',
  email: 'email',
  telephone: 'telephone',
  adresse: 'adresse',
  codePostal: 'codePostal',
  ville: 'ville',
  dateNaissance: 'dateNaissance',
  numeroSecu: 'numeroSecu',
  collaborateurId: 'collaborateurId',
  createdAt: 'createdAt'
};

exports.Prisma.VehiculeScalarFieldEnum = {
  id: 'id',
  societe: 'societe',
  marque: 'marque',
  modele: 'modele',
  immatriculation: 'immatriculation',
  etat: 'etat',
  proprietaire: 'proprietaire',
  dateMiseEnCirculation: 'dateMiseEnCirculation',
  kilometrage: 'kilometrage',
  kmProchaineRevision: 'kmProchaineRevision',
  dateLimiteControleTechnique: 'dateLimiteControleTechnique',
  dateLimiteControlePollution: 'dateLimiteControlePollution',
  typeVehicule: 'typeVehicule',
  createdAt: 'createdAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  email: 'email',
  telephone: 'telephone',
  adresse: 'adresse',
  codePostal: 'codePostal',
  ville: 'ville',
  categories: 'categories',
  status: 'status',
  commentaires: 'commentaires',
  dateCreation: 'dateCreation',
  dateDerniereModification: 'dateDerniereModification',
  utilisateurId: 'utilisateurId',
  collaborateursIds: 'collaborateursIds',
  montantDevis: 'montantDevis',
  archived: 'archived',
  archiveDate: 'archiveDate'
};

exports.Prisma.DemandeCongeScalarFieldEnum = {
  id: 'id',
  utilisateurId: 'utilisateurId',
  collaborateurId: 'collaborateurId',
  collaborateurNom: 'collaborateurNom',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  typeConge: 'typeConge',
  motif: 'motif',
  statut: 'statut',
  commentaireAdmin: 'commentaireAdmin',
  dateCreation: 'dateCreation',
  dateModification: 'dateModification',
  notificationLue: 'notificationLue'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  utilisateurId: 'utilisateurId',
  message: 'message',
  lien: 'lien',
  dateCreation: 'dateCreation',
  lue: 'lue',
  type: 'type',
  demandeId: 'demandeId'
};

exports.Prisma.ContratMaintenanceScalarFieldEnum = {
  id: 'id',
  client: 'client',
  reference: 'reference',
  type: 'type',
  montant: 'montant',
  dateDebut: 'dateDebut',
  dateEcheance: 'dateEcheance',
  statut: 'statut',
  description: 'description',
  contactClient: 'contactClient',
  emailContact: 'emailContact',
  telephoneContact: 'telephoneContact',
  notes: 'notes',
  dateCreation: 'dateCreation',
  dateDerniereModification: 'dateDerniereModification'
};

exports.Prisma.StockItemScalarFieldEnum = {
  id: 'id',
  cableType: 'cableType',
  typeM: 'typeM',
  typeG: 'typeG',
  enroulement: 'enroulement',
  longueur: 'longueur',
  createdAt: 'createdAt'
};

exports.Prisma.FicheDePosteScalarFieldEnum = {
  id: 'id',
  classification: 'classification',
  poste: 'poste',
  entreprise: 'entreprise',
  typeContrat: 'typeContrat',
  dureeContrat: 'dureeContrat',
  certifications: 'certifications',
  habilitations: 'habilitations',
  competencesRequises: 'competencesRequises',
  description: 'description',
  missions: 'missions',
  experience: 'experience',
  formation: 'formation',
  remuneration: 'remuneration',
  avantages: 'avantages',
  horaires: 'horaires',
  email: 'email',
  telephone: 'telephone',
  adresse: 'adresse',
  codePostal: 'codePostal',
  ville: 'ville',
  dateNaissance: 'dateNaissance',
  numeroSecu: 'numeroSecu',
  lieuTravail: 'lieuTravail',
  dateCreation: 'dateCreation',
  dateModification: 'dateModification',
  estActive: 'estActive',
  collaborateurId: 'collaborateurId'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  email: 'email',
  telephone: 'telephone',
  role: 'role',
  departement: 'departement',
  dateCreation: 'dateCreation',
  dernierAcces: 'dernierAcces',
  estActif: 'estActif'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  admin: 'admin',
  manager: 'manager',
  collaborateur: 'collaborateur'
};

exports.RoleAdmin = exports.$Enums.RoleAdmin = {
  super_admin: 'super_admin',
  admin: 'admin',
  moderateur: 'moderateur'
};

exports.Prisma.ModelName = {
  Collaborateur: 'Collaborateur',
  Compte: 'Compte',
  Evenement: 'Evenement',
  Salarie: 'Salarie',
  Vehicule: 'Vehicule',
  Contact: 'Contact',
  DemandeConge: 'DemandeConge',
  Notification: 'Notification',
  ContratMaintenance: 'ContratMaintenance',
  StockItem: 'StockItem',
  FicheDePoste: 'FicheDePoste',
  Admin: 'Admin'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
